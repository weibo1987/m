apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'war'
apply plugin: 'jetty'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    testCompile "junit:junit:4.7"
    compile "net.paoding:rose:1.2-SNAPSHOT"
    compile "net.paoding:jade:1.2-SNAPSHOT"
    compile "javax.servlet:servlet-api:2.4"
    compile "commons-logging:commons-logging:1.1.1"
    compile "commons-lang:commons-lang:2.6"
    compile "commons-collections:commons-collections:3.2.1"
    compile "org.springframework:spring-context:3.1.2.RELEASE"
    compile "org.springframework:spring-web:3.1.2.RELEASE"
    compile "log4j:log4j:1.2.17"
    compile "javax.servlet:jsp-api:2.0"
    compile "commons-fileupload:commons-fileupload:1.2.2"
    compile "org.springframework:spring-webmvc:3.1.2.RELEASE"
    compile "org.apache.velocity:velocity:1.7"
    compile "org.apache.velocity:velocity-tools:2.0"
    compile "net.paoding:pipe:1.2-SNAPSHOT"
    compile "net.paoding:context:1.2-SNAPSHOT"
    compile "sslext:sslext:1.10-4"
	compile "commons-jexl:commons-jexl:1.1"
	compile "org.springframework:spring-jdbc:3.1.2.RELEASE"
	compile "com.metaparadigm:json-rpc:1.0"
	compile "mysql:mysql-connector-java:5.1.6"
	compile "commons-dbcp:commons-dbcp:1.4"
	compile "org.springframework:spring-test:3.0.5.RELEASE"
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'e:/'
} }
}
eclipse.classpath.file.withXml {
    def node = it.asNode();
    for (Node n : node.children()) {
        if ("lib".equals(n.attribute("kind"))) {
            def node_attributes = new Node(n, "attributes");
            def map = new HashMap();
            map.put("name", "org.eclipse.jst.component.dependency");
            map.put("value", "/WEB-INF/lib");
            def node_attribute = new Node(node_attributes, "attribute", map);
        }
    }
}